// <auto-generated />
using System;
using DocStyleVerify.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DocStyleVerify.API.Migrations
{
    [DbContext(typeof(DocStyleVerifyDbContext))]
    [Migration("20250715032045_AddDefaultStylesAndNumbering")]
    partial class AddDefaultStylesAndNumbering
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocStyleVerify.API.Models.DefaultStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BasedOn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("FirstLineIndent")
                        .HasColumnType("real");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("FontSize")
                        .HasColumnType("real");

                    b.Property<float>("IndentationLeft")
                        .HasColumnType("real");

                    b.Property<float>("IndentationRight")
                        .HasColumnType("real");

                    b.Property<bool>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsItalic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsQuickStyle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnderline")
                        .HasColumnType("boolean");

                    b.Property<float>("LineSpacing")
                        .HasColumnType("real");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NextStyle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RawXml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("SpacingAfter")
                        .HasColumnType("real");

                    b.Property<float>("SpacingBefore")
                        .HasColumnType("real");

                    b.Property<string>("StyleId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("Type");

                    b.ToTable("DefaultStyles");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.DirectFormatPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alignment")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float?>("CharacterSpacing")
                        .HasColumnType("real");

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float?>("FirstLineIndent")
                        .HasColumnType("real");

                    b.Property<string>("FontFamily")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float?>("FontSize")
                        .HasColumnType("real");

                    b.Property<bool?>("HasOutline")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HasShadow")
                        .HasColumnType("boolean");

                    b.Property<string>("Highlighting")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float?>("IndentationLeft")
                        .HasColumnType("real");

                    b.Property<float?>("IndentationRight")
                        .HasColumnType("real");

                    b.Property<bool?>("IsAllCaps")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsItalic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSmallCaps")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsStrikethrough")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUnderline")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float?>("LineSpacing")
                        .HasColumnType("real");

                    b.Property<int>("OccurrenceCount")
                        .HasColumnType("integer");

                    b.Property<string>("PatternName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SampleText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<float?>("SpacingAfter")
                        .HasColumnType("real");

                    b.Property<float?>("SpacingBefore")
                        .HasColumnType("real");

                    b.Property<int>("TextStyleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Context");

                    b.HasIndex("TextStyleId");

                    b.ToTable("DirectFormatPatterns");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.FormattingContext", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CellIndex")
                        .HasColumnType("integer");

                    b.Property<string>("CellMergeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ColSpan")
                        .HasColumnType("integer");

                    b.Property<int>("ContentControlNestingLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ContentControlProperties")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("ContentControlTag")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContentControlTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContentControlType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContextKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("context_key");

                    b.Property<string>("DocumentPartType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ElementType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeaderFooterType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsInHeaderFooter")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMergedCell")
                        .HasColumnType("boolean");

                    b.Property<int>("ListLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ListNumberStyle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NestedTableLevel")
                        .HasColumnType("integer");

                    b.Property<int>("ParagraphIndex")
                        .HasColumnType("integer");

                    b.Property<string>("ParentContext")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("RowIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("RowSpan")
                        .HasColumnType("integer");

                    b.Property<int>("RunIndex")
                        .HasColumnType("integer");

                    b.Property<string>("SampleText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SectionIndex")
                        .HasColumnType("integer");

                    b.Property<string>("StructuralRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StyleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TableIndex")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContextKey");

                    b.HasIndex("ElementType");

                    b.HasIndex("StructuralRole");

                    b.ToTable("FormattingContexts");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.Mismatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Actual")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("ContextKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Expected")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MismatchFields")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SampleText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Medium");

                    b.Property<string>("StructuralRole")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("VerificationResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContextKey");

                    b.HasIndex("Severity");

                    b.HasIndex("VerificationResultId");

                    b.ToTable("Mismatches");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.NumberingDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AbstractNumId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("NumberingId")
                        .HasColumnType("integer");

                    b.Property<string>("RawXml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AbstractNumId");

                    b.HasIndex("NumberingId");

                    b.HasIndex("TemplateId");

                    b.ToTable("NumberingDefinitions");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.NumberingLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("FontSize")
                        .HasColumnType("real");

                    b.Property<float>("IndentationHanging")
                        .HasColumnType("real");

                    b.Property<float>("IndentationLeft")
                        .HasColumnType("real");

                    b.Property<bool>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsItalic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLegal")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("LevelJustification")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LevelText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NumberFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("NumberingDefinitionId")
                        .HasColumnType("integer");

                    b.Property<string>("RawXml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StartValue")
                        .HasColumnType("integer");

                    b.Property<float>("TabStopPosition")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("NumberingDefinitionId");

                    b.ToTable("NumberingLevels");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.TabStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Leader")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float>("Position")
                        .HasColumnType("real");

                    b.Property<int>("TextStyleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TextStyleId");

                    b.ToTable("TabStops");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Active");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("FileHash");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.TextStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AbstractNumberingId")
                        .HasColumnType("integer");

                    b.Property<string>("Alignment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BasedOnStyle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("BorderColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("BorderDirections")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BorderStyle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("BorderWidth")
                        .HasColumnType("real");

                    b.Property<float>("BottomMargin")
                        .HasColumnType("real");

                    b.Property<string>("CellBackgroundColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<float>("CharacterSpacing")
                        .HasColumnType("real");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ColumnCount")
                        .HasColumnType("integer");

                    b.Property<float>("ColumnSpacing")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FieldCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FieldDirty")
                        .HasColumnType("boolean");

                    b.Property<bool>("FieldLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("FieldResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("FirstLineIndent")
                        .HasColumnType("real");

                    b.Property<string>("FontFamily")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<float>("FontSize")
                        .HasColumnType("real");

                    b.Property<float>("FooterDistance")
                        .HasColumnType("real");

                    b.Property<int>("FormattingContextId")
                        .HasColumnType("integer");

                    b.Property<bool>("HasColumnSeparator")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOutline")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasShadow")
                        .HasColumnType("boolean");

                    b.Property<float>("HeaderDistance")
                        .HasColumnType("real");

                    b.Property<string>("Highlighting")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HyperlinkTarget")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HyperlinkTooltip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HyperlinkUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HyperlinkVisited")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageAltText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ImageDistanceFromText")
                        .HasColumnType("real");

                    b.Property<float>("ImageHeight")
                        .HasColumnType("real");

                    b.Property<bool>("ImageLockAspectRatio")
                        .HasColumnType("boolean");

                    b.Property<string>("ImagePosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ImageWidth")
                        .HasColumnType("real");

                    b.Property<string>("ImageWrapType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("IndentationLeft")
                        .HasColumnType("real");

                    b.Property<float>("IndentationRight")
                        .HasColumnType("real");

                    b.Property<bool>("IsAllCaps")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsItalic")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSmallCaps")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsStrikethrough")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTableHeader")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUnderline")
                        .HasColumnType("boolean");

                    b.Property<bool>("KeepTogether")
                        .HasColumnType("boolean");

                    b.Property<bool>("KeepWithNext")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("LeftMargin")
                        .HasColumnType("real");

                    b.Property<float>("LineSpacing")
                        .HasColumnType("real");

                    b.Property<string>("ListBulletChar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListBulletFont")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ListIndentPosition")
                        .HasColumnType("real");

                    b.Property<int>("ListLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ListLevelText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListNumberFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ListNumberStyle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ListStartValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ListTabPosition")
                        .HasColumnType("real");

                    b.Property<bool>("MirrorMargins")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("NumberingId")
                        .HasColumnType("integer");

                    b.Property<string>("Orientation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("PageHeight")
                        .HasColumnType("real");

                    b.Property<string>("PageNumberFormat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageNumberStart")
                        .HasColumnType("integer");

                    b.Property<float>("PageWidth")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<bool>("RepeatOnNewPage")
                        .HasColumnType("boolean");

                    b.Property<float>("RightMargin")
                        .HasColumnType("real");

                    b.Property<string>("SectionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("SpacingAfter")
                        .HasColumnType("real");

                    b.Property<float>("SpacingBefore")
                        .HasColumnType("real");

                    b.Property<string>("StyleSignature")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StyleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TableAlignment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TableBorderColor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TableBorderStyle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("TableBorderWidth")
                        .HasColumnType("real");

                    b.Property<string>("TableBottomBorderStyle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("TableCellBottomMargin")
                        .HasColumnType("real");

                    b.Property<float>("TableCellLeftMargin")
                        .HasColumnType("real");

                    b.Property<string>("TableCellPadding")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("TableCellRightMargin")
                        .HasColumnType("real");

                    b.Property<string>("TableCellSpacing")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("TableCellSpacingValue")
                        .HasColumnType("real");

                    b.Property<float>("TableCellTopMargin")
                        .HasColumnType("real");

                    b.Property<float>("TableCellWidth")
                        .HasColumnType("real");

                    b.Property<string>("TableLeftBorderStyle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TableRightBorderStyle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<float>("TableRowHeight")
                        .HasColumnType("real");

                    b.Property<string>("TableRowHeightRule")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableShadingColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TableShadingPattern")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("TableWidth")
                        .HasColumnType("real");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("TextDirection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("TopMargin")
                        .HasColumnType("real");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("VerticalAlignment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("WidowOrphanControl")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FormattingContextId")
                        .IsUnique();

                    b.HasIndex("StyleSignature");

                    b.HasIndex("StyleType");

                    b.HasIndex("TemplateId");

                    b.ToTable("TextStyles");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.VerificationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Completed");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalMismatches")
                        .HasColumnType("integer");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("TemplateId");

                    b.HasIndex("VerificationDate");

                    b.ToTable("VerificationResults");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.DefaultStyle", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.Template", "Template")
                        .WithMany("DefaultStyles")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.DirectFormatPattern", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.TextStyle", "TextStyle")
                        .WithMany("DirectFormatPatterns")
                        .HasForeignKey("TextStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextStyle");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.Mismatch", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.VerificationResult", "VerificationResult")
                        .WithMany("Mismatches")
                        .HasForeignKey("VerificationResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VerificationResult");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.NumberingDefinition", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.Template", "Template")
                        .WithMany("NumberingDefinitions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.NumberingLevel", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.NumberingDefinition", "NumberingDefinition")
                        .WithMany("NumberingLevels")
                        .HasForeignKey("NumberingDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NumberingDefinition");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.TabStop", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.TextStyle", "TextStyle")
                        .WithMany("TabStops")
                        .HasForeignKey("TextStyleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextStyle");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.TextStyle", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.FormattingContext", "FormattingContext")
                        .WithOne("TextStyle")
                        .HasForeignKey("DocStyleVerify.API.Models.TextStyle", "FormattingContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocStyleVerify.API.Models.Template", "Template")
                        .WithMany("TextStyles")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormattingContext");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.VerificationResult", b =>
                {
                    b.HasOne("DocStyleVerify.API.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.FormattingContext", b =>
                {
                    b.Navigation("TextStyle");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.NumberingDefinition", b =>
                {
                    b.Navigation("NumberingLevels");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.Template", b =>
                {
                    b.Navigation("DefaultStyles");

                    b.Navigation("NumberingDefinitions");

                    b.Navigation("TextStyles");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.TextStyle", b =>
                {
                    b.Navigation("DirectFormatPatterns");

                    b.Navigation("TabStops");
                });

            modelBuilder.Entity("DocStyleVerify.API.Models.VerificationResult", b =>
                {
                    b.Navigation("Mismatches");
                });
#pragma warning restore 612, 618
        }
    }
}
